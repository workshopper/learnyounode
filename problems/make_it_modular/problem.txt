This problem is the same as the previous but introduces the concept of {bold}modules{/bold}.
You will need to create two files to solve this.

Create a program that prints a list of files in a given directory, filtered by
the extension of the files. The first argument is the directory name and the
second argument is the extension filter. Print the list of files (one file per
line) to the console. You {bold}must{/bold} use asynchronous I/O.

You must write a {italic}module{/italic} file to do most of the work. The module
must {italic}export{/italic} a single function that takes {bold}three{/bold} arguments: the directory name,
the filter string and a callback function.

The callback function must be called using the idomatic node(err, data)
convention. This convention stipulates that unless there's an error, the first
argument passed to the callback will be null, and the second will be your
data. In this case the data will be your filtered list of files, as an Array.
If you receive an error, e.g. from your call to  `fs.readdir()`, the callback
must be called with the error, and only the error, as the first argument.

You {bold}must{/bold} not print directly to the console from your module file, only from your
original program.

In the case of an error bubbling up to your original program file, simply check
for it and print an informative message to the console.

----------------------------------------------------------------------
HINTS:

Create a new module by creating a new file that just contains your directory
reading and filtering function. To define a {italic}single function{/italic} {italic}export{/italic} you assign
your function to the `module.exports` object, overwriting what is already there:

  module.exports = function (...) { ... }

Or you can use a named function and assign the name.

To use your new module in your original program file, use the `require()` call
in the same way that you `require('fs')` to load the `fs` module. The only
difference is that for local modules must be prefixed with './'. So, if your
file is named mymodule.js then:

  var mymodule = require('./mymodule.js')

The '.js' is optional here and you will often see it omitted.

You now have the `module.exports` object in your module assigned to the
`mymodule` variable. Since you are exporting a single function, `mymodule` is a
function you can call!

Also keep in mind that it is idiomatic to check for errors and do early-returns
within callback functions:

  function bar (callback) {
    foo(function (err, data) {
      if (err)
        return callback(err) // early return

      ... // continue when no-error
    })
  }

----------------------------------------------------------------------
